<?php
// $Id: membership.module,v 1.2.2.2 2010/05/17 07:03:30 boobaa Exp $

/**
 * @file
 * Provides easy time-limited membership management.
 */

/**
 * Implementation of hook_help().
 */
function membership_help($path, $arg) {
  $output = '';
  switch($path) {
  case 'admin/help#membership':
    $output = '<p>'. t('Provides easy time-limited membership management.') . '</p>';
    break;
  }
  return $output;
}

/**
 * Implementation of hook_menu()
 */
function membership_menu() {
  $items = array();
  $items['admin/settings/membership'] = array(
    'title'            => 'Membership management',
    'description'      => 'Membership management.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('membership_admin_settings'),
    'access arguments' => array('administer membership'),
    'type'             => MENU_NORMAL_ITEM,
  );
  $items['admin/user/membership'] = array(
    'title'            => 'Membership management',
    'description'      => 'Easy time-limited membership management.',
    'page callback'    => 'membership_edit',
    'access arguments' => array('access membership'),
    'type'             => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_perm()
 */
function membership_perm() {
  return array('access membership', 'administer membership');
}

function membership_list_form() {

  
  $pagelen = 25;
  $header = array(
    array('data' => t('Username'), 'field' => 'name'),
    array('data' => t('Last modified'), 'field' => 'lastmod'),
    array('data' => t('Expires'), 'field' => 'expires'),
    t('Operations'),
  );
  $sql = 'SELECT u.uid AS uid, name, lastmod, expires FROM {membership} AS m INNER JOIN {users} AS u ON u.uid = m.uid';
  $sql .= tablesort_sql($header);
  $result = pager_query($sql, $pagelen, 0, NULL);
  $form = array();
  
  //global $user;
  //print_r($user );
  //exit;
  while($user = db_fetch_object($result)) {
    $form['name'][$user->uid]       = array('#value' => theme('username', $user));
    $form['lastmod'][$user->uid]    = array('#value' => format_date($user->lastmod, 'custom', t('Y-m-d')));
    $form['expires'][$user->uid]    = array('#value' => format_date($user->expires, 'custom', t('Y-m-d')));
    $form['expire_now'][$user->uid] = array('#value' => l(t('Expire now'), 'admin/user/membership/expire/' . $user->uid) . ' - '.
      l(t('Edit membership'), 'admin/user/membership/edit/' . $user->uid));
  }
  if($form['name']) {
    $form['pager'] = array('#value' => theme('pager', NULL, $pagelen, 0));
  }
  $form['newmember'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Add a new member'),
    '#tree'        => TRUE,
    '#collapsible' => TRUE,
  );
  $form['newmember']['member'] = array(
    '#type'              => 'textfield',
    '#title'             => t('New member'),
    '#autocomplete_path' => 'user/autocomplete',
  );
  $form['newmember']['expires'] = array(
    '#type'          => 'date',
    '#title'         => t('Expires'),
    '#default_value' => array( // XXX: is there any nicer way to set it to "tomorrow"?
      'year'  => date('Y',strtotime('now') + 60*60*24),
      'month' => date('n',strtotime('now') + 60*60*24),
      'day'   => date('j',strtotime('now') + 60*60*24),
    ),
  );
  $form['newmember']['submit'] = array(
    '#type'   => 'submit',
    '#value'  => t('Save'),
    '#weight' => 1,
  );
  
  
  
  /* ------------------------------------------------------------------------------------------------ */
//view all expired members 
$sql = 'select uid from users where uid not  in (select  uid from membership)';	
$result = pager_query($sql, 900, 0, NULL);

  $form['expiredMembers'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Expired Members'),
    '#tree'        => TRUE,
    '#collapsible' => TRUE,
  );
  
  
while($expired = db_fetch_object($result)) {
 
$form['expiredMembers']['expired'][$expired->uid] = array(

 '#type'          => 'fieldset',
 '#value' => l(t('ID:' . $expired->uid .' - View User'), 
 'user/' . $expired->uid));
//print_r($user);
 
 }
 /* ------------------------------------------------------------------------------------------------ */ 
 
  return $form;
}

function membership_list_form_validate($form_id, &$form_state) {
  if(empty($form_state['values']['newmember']['member'])) {
    form_set_error('newmember][member', t('A username must be given.'));
  }
  else {
    // FIXME: user_load() wouldn't be better?
    $user = db_fetch_object(db_query("SELECT uid FROM {users} WHERE name = '%s'", $form_state['values']['newmember']['member']));
    if($user) {
      $roles = user_roles(TRUE); // XXX: wouldn't it be faster without TRUE?
      $result = db_fetch_object(db_query("SELECT COUNT(mid) AS mid_cnt FROM {membership} WHERE uid = %d", $user->uid));
      if($result->mid_cnt > 0) {
        form_set_error('newmember][member', t('This user is already a member of the %role role.',
          array('%role' => $roles[variable_get('membership_role', 0)])));
      }
    }
    else {
      form_set_error('newmember][member', t('Nonexistent username.'));
    }
  }
  $form_time = strtotime($form_state['values']['newmember']['expires']['year'] . '-'.
    $form_state['values']['newmember']['expires']['month'] . '-' . $form_state['values']['newmember']['expires']['day']);
  $sys_time = strtotime(date('Y-n-j'));
  if($form_time < ($sys_time + 60*60*24)) {
    form_set_error('newmember][expires][year', t('Expires should be in the future.'));
    // XXX: form_set_error DOES NOT set error on all the children of newmember][expires - so we must use this hack :S
    form_set_error('newmember][expires][month', ' ');
    form_set_error('newmember][expires][day', ' ');
  }
}

function membership_list_form_submit($form_id, &$form_state) {
  global $user;
  $role = variable_get('membership_role', 0);
  $member = user_load(array('name' => $form_state['values']['newmember']['member']));
  $datestamp = mktime(0, 0, 0, $form_state['values']['newmember']['expires']['month'], $form_state['values']['newmember']['expires']['day'],
    $form_state['values']['newmember']['expires']['year']);
  db_query('INSERT INTO {membership} (uid, oid, lastmod, expires) VALUES (%d, %d, %d, %d)', $member->uid, $user->uid, mktime(),
    $datestamp);
  db_query('INSERT INTO {users_roles} (uid, rid) VALUES (%d, %d)', $member->uid, $role);
  $roles = user_roles(TRUE); // XXX: wouldn't it be faster without TRUE?
  $params['variables'] = array(
    '!member' => $form_state['values']['newmember']['member'],
    '!role'   => $roles[$role],
    '!expire' => format_date($datestamp, 'custom', t('Y-m-d')),
    '!owner'  => $user->name,
  );
  // send a mail to the new member
  $params['account'] = $member;
  drupal_mail('membership', 'member_add', $member->mail, user_preferred_language($member), $params);
  // send a mail to the manager (if exists)
  if(($uid = variable_get('membership_manager', 0)) != 0) {
    $manager = user_load(array('uid' => $uid));
    $params['account'] = $manager;
    drupal_mail('membership', 'managed_add', $manager->mail, user_preferred_language($manager), $params);
  }
}

/**
 * Implementation of hook_theme().
 */
function membership_theme() {
  return array(
    'membership_list_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

function theme_membership_list_form($form) {
  $header = array(
    array('data' => t('Username'), 'field' => 'name'),
    array('data' => t('Last modified'), 'field' => 'lastmod'),
    array('data' => t('Expires'), 'field' => 'expires'),
    t('Operations'),
  );
  if(isset($form['name']) && is_array($form['name'])) {
    foreach(element_children($form['name']) as $key) {
      $rows[] = array(
        drupal_render($form['name'][$key]),
        drupal_render($form['lastmod'][$key]),
        drupal_render($form['expires'][$key]),
        drupal_render($form['expire_now'][$key]),
      );
    }
  }
  else {
    $rows[] = array(array('data' => t('There are no members.'), 'colspan' => '4'));
  }
  $output = theme('table', $header, $rows);
  if($form['pager']['#value']) {
    $output .= drupal_render($form['pager']);
  }
  $output .= drupal_render($form);
  return $output;
}

function membership_expire($uid) {
  global $user;
  $member = user_load(array('uid' => $uid));
  $role = variable_get('membership_role', 0);
  $roles = user_roles(TRUE); // XXX: wouldn't it be faster without TRUE?
  $params['variables'] = array(
    '!member' => check_plain($member->name),
    '!role'   => $roles[$role],
    '!owner'  => $user->name,
  );
  // send a mail to the ex-member
  $params['account'] = $member;
  drupal_mail('membership', 'member_del', $member->mail, user_preferred_language($member), $params);
  // send a mail to the manager (if exists)
  if(($manager_uid = variable_get('membership_manager', 0)) != 0) {
    $manager = user_load(array('uid' => $manager_uid));
    $params['account'] = $manager;
    drupal_mail('membership', 'managed_del', $manager->mail, user_preferred_language($manager), $params);
  }
  // mail should be sent before delete, as we need some info for it
  db_query('DELETE FROM {membership} WHERE uid = %d', $uid);
  db_query('DELETE FROM {users_roles} WHERE uid = %d AND rid = %d', $uid, $role);
}

function membership_edit_form() {
  $uid = arg(4);
  $result = db_query('SELECT expires FROM {membership} WHERE uid = %d', $uid);
  $member = db_fetch_object($result);
  if(!$member) {
    drupal_set_message(t('There is no such member.'), 'error');
    drupal_goto('admin/user/membership');
  }
  $user = user_load(array('uid' => $uid));
  $form = array();
  $form['expires'] = array(
    '#type'          => 'date',
    '#title'         => t('Expire date of !member', array('!member' => theme('username', $user))),
    '#default_value' => array(
      'year'  => date('Y', $member->expires),
      'month' => date('n', $member->expires),
      'day'   => date('j', $member->expires),
    ),
    '#required'      => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

function membership_edit_form_validate($form_id, &$form_state) {
  $form_time = strtotime($form_state['values']['expires']['year'] . '-' . $form_state['values']['expires']['month'] . '-'.
    $form_state['values']['expires']['day']);
  $sys_time = strtotime(date('Y-n-j'));
  if($form_time < ($sys_time + 60*60*24)) {
    form_set_error('expires', t('Expires should be in the future.'));
  }
}

function membership_edit_form_submit($form_id, &$form_state) {
  global $user;
  $datestamp = mktime(0, 0, 0, $form_state['values']['expires']['month'], $form_state['values']['expires']['day'],
    $form_state['values']['expires']['year']);
  db_query('UPDATE {membership} SET oid = %d, lastmod = %d, expires = %d WHERE uid = %d', $user->uid, mktime(), $datestamp, arg(4));
  $member = user_load(array('uid' => arg(4)));
  $roles = user_roles(TRUE); // XXX: wouldn't it be faster without TRUE?
  $params['variables'] = array(
    '!member' => check_plain($member->name),
    '!role'   => $roles[variable_get('membership_role', 0)],
    '!expire' => format_date($datestamp, 'custom', t('Y-m-d')),
    '!owner'  => $user->name,
  );
  // send a mail to the new member
  $params['account'] = $member;
  drupal_mail('membership', 'member_mod', $member->mail, user_preferred_language($member), $params);
  // send a mail to the manager (if exists)
  if(($uid = variable_get('membership_manager', 0)) != 0) {
    $manager = user_load(array('uid' => $uid));
    $params['account'] = $manager;
    drupal_mail('membership', 'managed_mod', $manager->mail, user_preferred_language($manager), $params);
  }
  $form_state['redirect'] = 'admin/user/membership';
}

function membership_edit() {
  if(variable_get('membership_role', 0) == 0) {
    return t('Go to the <a href="!url">setup form</a> and select a membership-managed role.', array('!url' => url('admin/settings/membership')));
  }
  switch(arg(3)) {
  case NULL:
    $form = drupal_get_form('membership_list_form');
    break;
  case 'expire':
    membership_expire(arg(4));
    drupal_goto('admin/user/membership');
    break;
  case 'edit':
    $form = drupal_get_form('membership_edit_form');
    break;
  default:
    $form = 'Op: ' . arg(3) . ', uid: ' . arg(4);
    break;
  }
  return $form;
}

function membership_admin_settings() {
  $roles = user_roles(TRUE);
  $keys = array_keys($roles, 'authenticated user');
  unset($roles[$keys[0]]);
  $form['membership_role'] = array(
    '#type'          => 'radios',
    '#title'         => t('Membership-managed role'),
    '#default_value' => variable_get('membership_role', 0),
    '#options'       => $roles,
    '#description'   => t('Select the role whose members should be managed in a time-limited manner.'),
  );
  $cnt = db_fetch_object(db_query('SELECT COUNT(uid) AS uid_cnt FROM {users_roles} WHERE rid = %d', variable_get('membership_role', 0)));
  if($cnt->uid_cnt != 0) {
    $form['membership_role']['#disabled'] = 'disabled';
    $form['membership_role']['#description'] = t('Membership-managed role cannot be changed as it already has members.');
  }
  $result = db_query('SELECT DISTINCT u.uid AS uid, name FROM {permission} AS p INNER JOIN {users_roles} AS ur ON ur.rid = p.rid '.
    'INNER JOIN {users} AS u ON ur.uid = u.uid WHERE p.perm LIKE "%access membership%" AND status != 0 AND access != 0 ORDER BY name');
  $users = array('0' => t('none'));
  $userlist = array();
  while($account = db_fetch_object($result)) {
    // XXX: is it the intended way to output usernames into a dropdown select?
    $users[$account->uid] = check_plain($account->name);
    $userlist[] = $account;
  }
  if($userlist) {
    $form['membership_manager'] = array(
      '#type'          => 'select',
      '#title'         => t('Membership Power Manager'),
      '#default_value' => variable_get('membership_manager', 1),
      '#options'       => $users,
      '#description'   => t('Select the Power Manager who will receive emails on every membership change.'),
    );
  }
  else {
    $form['membership_manager'] = array(
      '#type'  => 'markup',
      '#value' => t('Power Manager cannot be specified as there are no roles with %priv privilege.',
        array('%priv' => t('access membership'))) . '<br />',
    );
  }
  return system_settings_form($form);
}

/**
 * Implementation of hook_mail().
 */
function membership_mail($key, &$message, $params) {
  global $base_url;
  $language = $message['language'];
  $variables = user_mail_tokens($params['account'], $language);
  $variables += $params['variables'];
  $variables['!url'] = $base_url;
  switch($key) {
  case 'member_del':
    $message['subject'] = t('Deleted membership', $variables, $language->language);
    $message['body'] = t("Dear !username,\n\nyou have just been removed from the !role role at !site (!url).\n\nSincerely: !owner",
      $variables, $language->language);
    break;
  case 'managed_del':
    $message['subject'] = t('Deleted membership', $variables, $language->language);
    $message['body'] = t("Dear Power Manager,\n\n!owner has just removed !member from the !role role at !site (!url).", $variables,
      $language->language);
    break;
  case 'member_add':
    $message['subject'] = t('New membership', $variables, $language->language);
    $message['body'] = t("Dear !username,\n\nyou have just been added to the !role role at !site (!url). Your membership expires at !expire.\n\nSincerely: !owner",
      $variables, $language->language);
    break;
  case 'managed_add':
    $message['subject'] = t('New membership', $variables, $language->language);
    $message['body'] = t("Dear Power Manager,\n\n!owner has just added !member to the !role role at !site (!url). This new membership expires at !expire.",
      $variables, $language->language);
    break;
  case 'member_mod':
    $message['subject'] = t('Modified membership', $variables, $language->language);
    $message['body'] = t("Dear !username,\n\nyour membership of the !role role has just been modified at !site (!url): it expires at !expire.\n\nSincerely: !owner",
      $variables, $language->language);
    break;
  case 'managed_mod':
    $message['subject'] = t('Modified membership', $variables, $language->language);
    $message['body'] = t("Dear Power Manager,\n\n!owner has just modified the membership of !member regarding to the !role role at !site (!url): it expires at !expire.",
      $variables, $language->language);
    break;
  case 'member_exp':
    $message['subject'] = t('Expired membership', $variables, $language->language);
    $message['body'] = t("Dear !member,\n\nyou have just been removed from the !role role at !site (!url) because of membership expiration.",
      $variables, $language->language);
    break;
  case 'managed_exp':
    $message['subject'] = t('Expired membership', $variables, $language->language);
    $message['body'] = t("Dear Power Manager,\n\n!member has just been removed from the !role role at !site (!url) because of membership expiration.",
      $variables, $language->language);
    break;
  }
}

/**
 * Implementation of hook_cron().
 */
function membership_cron() {
  $result = db_query('SELECT uid FROM {membership} WHERE expires < %d', mktime());
  $users = array();
  while($row = db_fetch_object($result)) {
    $users[] = user_load(array('uid' => $row->uid));
  }
  if($users) {
    $roles = user_roles(TRUE); // XXX: wouldn't it be faster without TRUE?
    $role = variable_get('membership_role', 0);
    $params['variables']['!role'] = $roles[$role];
    if(($manager_uid = variable_get('membership_manager', 0)) != 0) {
      $manager = user_load(array('uid' => $manager_uid));
    }
    foreach($users as $user) {
      $params['variables']['!member'] = check_plain($user->name);
      // send a mail to the ex-member
      drupal_mail('membership', 'member_exp', $user->mail, user_preferred_language($user), $params);
      // send a mail to the manager (if exists)
      if($manager) {
        drupal_mail('membership', 'managed_exp', $manager->mail, user_preferred_language($manager), $params);
      }
      // mail should be sent before delete, as we need some info for it
      db_query('DELETE FROM {membership} WHERE uid = %d', $user->uid);
      db_query('DELETE FROM {users_roles} WHERE uid = %d AND rid = %d', $user->uid, $role);
    }
  }
}



 
// vim: set ft=php syntax=php expandtab ts=2 sw=2 autoindent smartindent:
